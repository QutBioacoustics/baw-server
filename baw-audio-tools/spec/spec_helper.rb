# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'simplecov'

if ENV['TRAVIS']
  require 'codeclimate-test-reporter'

  # code climate
  CodeClimate::TestReporter.configure do |config|
    config.logger.level = Logger::DEBUG
  end
  CodeClimate::TestReporter.start

  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter.new(
      [SimpleCov::Formatter::HTMLFormatter,
      CodeClimate::TestReporter::Formatter]
  )

else
  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter.new(
      SimpleCov::Formatter::HTMLFormatter
  )
end

# start code coverage
SimpleCov.start

require 'active_support/all'
require 'zonebie'
require 'baw-audio-tools'
require File.dirname(__FILE__) + '/baw-audio-tools/shared_spec_helper'

RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  #config.profile_examples = 20

  # store original stdout / stderr
  original_stderr = $stderr
  original_stdout = $stdout

  config.before(:all) do
    # Redirect stderr and stdout to text files
    $stderr = File.new(File.join(File.dirname(__FILE__), '..', 'tmp', 'rspec_stderr.txt'), 'w')
    $stdout = File.new(File.join(File.dirname(__FILE__), '..', 'tmp', 'rspec_stdout.txt'), 'w')
  end

  config.after(:all) do
    $stderr = original_stderr
    $stdout = original_stdout
  end

  # for settings when running tests. In normal use, Settings are used from the parent ruby project.
  require 'ostruct'
  config.add_setting :test_settings
  config.test_settings = OpenStruct.new({
      cached_audio_defaults:
          OpenStruct.new({
              storage_format: 'mp3',
              channel: 0,
              sample_rate: 22050,
              max_duration_seconds: 300.0,
              min_duration_seconds: 0.5
          }),
      cached_spectrogram_defaults:
          OpenStruct.new({
              storage_format: 'png',
              channel: 0,
              sample_rate: 22050,
              window: 512,
              window_function: 'Hamming',
              colour: 'g',
              max_duration_seconds: 120.0,
              min_duration_seconds: 0.5
          }),
      cached_dataset_defaults:
          OpenStruct.new({
              storage_format: 'txt',
              one_item_per_line: true
          }),
      available_formats:
          OpenStruct.new({
              text: %w(json),
              audio: %w(mp3 webm ogg flac wav wac),
              image: %w(png)
          }),
      audio_tools:
          OpenStruct.new({
              ffmpeg_executable: 'ffmpeg',
              ffprobe_executable: 'ffprobe',
              mp3splt_executable: 'mp3splt',
              sox_executable: 'sox',
              wavpack_executable: 'wvunpack',
              shntool_executable: 'shntool',
              wav2png_executable: 'wav2png',
              wac2wav_executable: 'wac2wavcmd',
              imagemagick_convert_executable: 'convert',
              imagemagick_identify_executable: 'identify'
          }),
      audio_tools_timeout_sec: 10
  })

  # so Time.zone.parse can be used
  #Time.zone = 'UTC'
  Zonebie.set_random_timezone
end
