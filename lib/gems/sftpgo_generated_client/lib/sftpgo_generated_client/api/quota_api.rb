=begin
#SFTPGo

#SFTPGo REST API

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module SftpgoGeneratedClient
  class QuotaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # update the folder used quota limits
    # Set the current used quota limits for the given folder
    # @param base_virtual_folder [BaseVirtualFolder] The only folder mandatory fields are mapped_path,used_quota_size and used_quota_files. Please note that if the used quota fields are missing they will default to 0
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode the update mode specifies if the given quota usage values should be added or replace the current ones
    # @return [ApiResponse]
    def folder_quota_update(base_virtual_folder, opts = {})
      data, _status_code, _headers = folder_quota_update_with_http_info(base_virtual_folder, opts)
      data
    end

    # update the folder used quota limits
    # Set the current used quota limits for the given folder
    # @param base_virtual_folder [BaseVirtualFolder] The only folder mandatory fields are mapped_path,used_quota_size and used_quota_files. Please note that if the used quota fields are missing they will default to 0
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode the update mode specifies if the given quota usage values should be added or replace the current ones
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def folder_quota_update_with_http_info(base_virtual_folder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.folder_quota_update ...'
      end
      # verify the required parameter 'base_virtual_folder' is set
      if @api_client.config.client_side_validation && base_virtual_folder.nil?
        fail ArgumentError, "Missing the required parameter 'base_virtual_folder' when calling QuotaApi.folder_quota_update"
      end
      allowable_values = ["add", "reset"]
      if @api_client.config.client_side_validation && opts[:'mode'] && !allowable_values.include?(opts[:'mode'])
        fail ArgumentError, "invalid value for \"mode\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/folder_quota_update'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(base_virtual_folder) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#folder_quota_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the active quota scans for folders
    # @param [Hash] opts the optional parameters
    # @return [Array<FolderQuotaScan>]
    def get_folders_quota_scans(opts = {})
      data, _status_code, _headers = get_folders_quota_scans_with_http_info(opts)
      data
    end

    # Get the active quota scans for folders
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FolderQuotaScan>, Integer, Hash)>] Array<FolderQuotaScan> data, response status code and response headers
    def get_folders_quota_scans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.get_folders_quota_scans ...'
      end
      # resource path
      local_var_path = '/folder_quota_scan'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<FolderQuotaScan>' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#get_folders_quota_scans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the active quota scans for users home directories
    # @param [Hash] opts the optional parameters
    # @return [Array<QuotaScan>]
    def get_quota_scans(opts = {})
      data, _status_code, _headers = get_quota_scans_with_http_info(opts)
      data
    end

    # Get the active quota scans for users home directories
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuotaScan>, Integer, Hash)>] Array<QuotaScan> data, response status code and response headers
    def get_quota_scans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.get_quota_scans ...'
      end
      # resource path
      local_var_path = '/quota_scan'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<QuotaScan>' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#get_quota_scans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update the user used quota limits
    # Set the current used quota limits for the given user
    # @param user [User] The only user mandatory fields are username,used_quota_size and used_quota_files. Please note that if the quota fields are missing they will default to 0
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode the update mode specifies if the given quota usage values should be added or replace the current ones
    # @return [ApiResponse]
    def quota_update(user, opts = {})
      data, _status_code, _headers = quota_update_with_http_info(user, opts)
      data
    end

    # update the user used quota limits
    # Set the current used quota limits for the given user
    # @param user [User] The only user mandatory fields are username,used_quota_size and used_quota_files. Please note that if the quota fields are missing they will default to 0
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode the update mode specifies if the given quota usage values should be added or replace the current ones
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def quota_update_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.quota_update ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling QuotaApi.quota_update"
      end
      allowable_values = ["add", "reset"]
      if @api_client.config.client_side_validation && opts[:'mode'] && !allowable_values.include?(opts[:'mode'])
        fail ArgumentError, "invalid value for \"mode\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/quota_update'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#quota_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # start a new folder quota scan
    # A quota scan update the number of files and their total size for the specified folder
    # @param base_virtual_folder [BaseVirtualFolder] 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponse]
    def start_folder_quota_scan(base_virtual_folder, opts = {})
      data, _status_code, _headers = start_folder_quota_scan_with_http_info(base_virtual_folder, opts)
      data
    end

    # start a new folder quota scan
    # A quota scan update the number of files and their total size for the specified folder
    # @param base_virtual_folder [BaseVirtualFolder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def start_folder_quota_scan_with_http_info(base_virtual_folder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.start_folder_quota_scan ...'
      end
      # verify the required parameter 'base_virtual_folder' is set
      if @api_client.config.client_side_validation && base_virtual_folder.nil?
        fail ArgumentError, "Missing the required parameter 'base_virtual_folder' when calling QuotaApi.start_folder_quota_scan"
      end
      # resource path
      local_var_path = '/folder_quota_scan'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(base_virtual_folder) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#start_folder_quota_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # start a new user quota scan
    # A quota scan update the number of files and their total size for the specified user
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponse]
    def start_quota_scan(user, opts = {})
      data, _status_code, _headers = start_quota_scan_with_http_info(user, opts)
      data
    end

    # start a new user quota scan
    # A quota scan update the number of files and their total size for the specified user
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def start_quota_scan_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.start_quota_scan ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling QuotaApi.start_quota_scan"
      end
      # resource path
      local_var_path = '/quota_scan'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#start_quota_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
