=begin
#SFTPGo

#SFTPGo REST API

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module SftpgoGeneratedClient
  # Additional restrictions
  class UserFilters
    # only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"
    attr_accessor :allowed_ip

    # clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones
    attr_accessor :denied_ip

    # if null or empty any available login method is allowed
    attr_accessor :denied_login_methods

    # if null or empty any available protocol is allowed
    attr_accessor :denied_protocols

    # filters based on file extensions. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be listed in the list of files. Please note that these restrictions can be easily bypassed
    attr_accessor :file_extensions

    # maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`
    attr_accessor :max_upload_file_size

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allowed_ip' => :'allowed_ip',
        :'denied_ip' => :'denied_ip',
        :'denied_login_methods' => :'denied_login_methods',
        :'denied_protocols' => :'denied_protocols',
        :'file_extensions' => :'file_extensions',
        :'max_upload_file_size' => :'max_upload_file_size'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allowed_ip' => :'Array<String>',
        :'denied_ip' => :'Array<String>',
        :'denied_login_methods' => :'Array<LoginMethods>',
        :'denied_protocols' => :'Array<SupportedProtocols>',
        :'file_extensions' => :'Array<ExtensionsFilter>',
        :'max_upload_file_size' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'allowed_ip',
        :'denied_ip',
        :'denied_login_methods',
        :'denied_protocols',
        :'file_extensions',
        :'max_upload_file_size'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SftpgoGeneratedClient::UserFilters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SftpgoGeneratedClient::UserFilters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allowed_ip')
        if (value = attributes[:'allowed_ip']).is_a?(Array)
          self.allowed_ip = value
        end
      end

      if attributes.key?(:'denied_ip')
        if (value = attributes[:'denied_ip']).is_a?(Array)
          self.denied_ip = value
        end
      end

      if attributes.key?(:'denied_login_methods')
        if (value = attributes[:'denied_login_methods']).is_a?(Array)
          self.denied_login_methods = value
        end
      end

      if attributes.key?(:'denied_protocols')
        if (value = attributes[:'denied_protocols']).is_a?(Array)
          self.denied_protocols = value
        end
      end

      if attributes.key?(:'file_extensions')
        if (value = attributes[:'file_extensions']).is_a?(Array)
          self.file_extensions = value
        end
      end

      if attributes.key?(:'max_upload_file_size')
        self.max_upload_file_size = attributes[:'max_upload_file_size']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allowed_ip == o.allowed_ip &&
          denied_ip == o.denied_ip &&
          denied_login_methods == o.denied_login_methods &&
          denied_protocols == o.denied_protocols &&
          file_extensions == o.file_extensions &&
          max_upload_file_size == o.max_upload_file_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allowed_ip, denied_ip, denied_login_methods, denied_protocols, file_extensions, max_upload_file_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SftpgoGeneratedClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
