=begin
#SFTPGo

#SFTPGo REST API

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module SftpgoGeneratedClient
  # Google Cloud Storage configuration details
  class GCSConfig
    attr_accessor :bucket

    # Google Cloud Storage JSON credentials base64 encoded. This field must be populated only when adding/updating a user. It will be always omitted, since there are sensitive data, when you search/get users. The credentials will be stored in the configured \"credentials_path\"
    attr_accessor :credentials

    # Automatic credentials:   * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null   * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials 
    attr_accessor :automatic_credentials

    attr_accessor :storage_class

    # key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available
    attr_accessor :key_prefix

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bucket' => :'bucket',
        :'credentials' => :'credentials',
        :'automatic_credentials' => :'automatic_credentials',
        :'storage_class' => :'storage_class',
        :'key_prefix' => :'key_prefix'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bucket' => :'String',
        :'credentials' => :'String',
        :'automatic_credentials' => :'Integer',
        :'storage_class' => :'String',
        :'key_prefix' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'automatic_credentials',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SftpgoGeneratedClient::GCSConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SftpgoGeneratedClient::GCSConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bucket')
        self.bucket = attributes[:'bucket']
      end

      if attributes.key?(:'credentials')
        self.credentials = attributes[:'credentials']
      end

      if attributes.key?(:'automatic_credentials')
        self.automatic_credentials = attributes[:'automatic_credentials']
      end

      if attributes.key?(:'storage_class')
        self.storage_class = attributes[:'storage_class']
      end

      if attributes.key?(:'key_prefix')
        self.key_prefix = attributes[:'key_prefix']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @bucket.nil?
        invalid_properties.push('invalid value for "bucket", bucket cannot be nil.')
      end

      if @bucket.to_s.length < 1
        invalid_properties.push('invalid value for "bucket", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @bucket.nil?
      return false if @bucket.to_s.length < 1
      automatic_credentials_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless automatic_credentials_validator.valid?(@automatic_credentials)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] bucket Value to be assigned
    def bucket=(bucket)
      if bucket.nil?
        fail ArgumentError, 'bucket cannot be nil'
      end

      if bucket.to_s.length < 1
        fail ArgumentError, 'invalid value for "bucket", the character length must be great than or equal to 1.'
      end

      @bucket = bucket
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_credentials Object to be assigned
    def automatic_credentials=(automatic_credentials)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(automatic_credentials)
        fail ArgumentError, "invalid value for \"automatic_credentials\", must be one of #{validator.allowable_values}."
      end
      @automatic_credentials = automatic_credentials
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bucket == o.bucket &&
          credentials == o.credentials &&
          automatic_credentials == o.automatic_credentials &&
          storage_class == o.storage_class &&
          key_prefix == o.key_prefix
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bucket, credentials, automatic_credentials, storage_class, key_prefix].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SftpgoGeneratedClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
