# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

ENV['RUNNING_RSPEC'] = 'yes'

require 'simplecov'

if ENV['TRAVIS']
  require 'codeclimate-test-reporter'
  require 'coveralls'

  # code climate
  CodeClimate::TestReporter.configure do |config|
    config.logger.level = Logger::WARN
  end
  CodeClimate::TestReporter.start

  # coveralls
  Coveralls.wear!

  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
      Coveralls::SimpleCov::Formatter,
      CodeClimate::TestReporter::Formatter
  ]

else
  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
      SimpleCov::Formatter::HTMLFormatter
  ]
end

# start code coverage
SimpleCov.start

require 'zonebie'
require 'fakeredis'
require 'fakeredis/rspec'
require 'active_support/core_ext'
require 'webmock/rspec'

require 'baw-workers'

WebMock.disable_net_connect!(allow: 'codeclimate.com')

# include shared_context
Dir[File.join(File.dirname(__FILE__), 'support', '**', '*.rb')].each { |file| require file }

# include rake tasks
require 'rake'

RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  config.expect_with :rspec do |c|
    c.syntax = [:should, :expect]
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  #config.profile_examples = 20

  Zonebie.set_random_timezone

  # provide access to tmp dir, default settings file, stdout, and stderr files
  config.add_setting :tmp_dir
  config.tmp_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'tmp'))

  config.add_setting :default_settings_path
  config.default_settings_path = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'settings', 'settings.default.yml'))

  config.add_setting :program_stdout
  config.program_stdout = File.join(config.tmp_dir, 'program_stdout.log')

  config.add_setting :program_stderr
  config.program_stderr = File.join(config.tmp_dir, 'program_stderr.log')

  # indicate that webmock requests were successful
  WebMock.after_request do |request_signature, response|
    BawWorkers::Config.logger_worker.debug('respec-config') {
      "Request #{request_signature} was made and #{response.inspect} was returned"
    }
  end

  config.before(:suite) do
    # delete then create temp dir
    FileUtils.rm_rf(config.tmp_dir)
    FileUtils.mkpath(config.tmp_dir)

    # include rake tasks and environment task
    Dir[File.join(File.dirname(__FILE__), '..', 'lib', 'tasks', '*.rake')].each do |file|
      Rake.application.rake_require File.join('tasks', File.basename(file, File.extname(file)))
    end
    Rake::Task.define_task(:environment)

    # redirect stdout and stderr to files
    BawWorkers::Config.set_console_to_file(config.program_stdout, config.program_stderr)

    # load settings
    BawWorkers::Config.set_settings_source(config.default_settings_path)

    # ensure harvester to do path exists
    FileUtils.mkpath(BawWorkers::Settings.actions.harvest.to_do_path)

    # configure common classes
    BawWorkers::Config.set_logger_files
    BawWorkers::Config.set_logger_levels
    BawWorkers::Config.set_mailer
    BawWorkers::Config.set_common
    BawWorkers::Config.set_api
    BawWorkers::Config.set_rspec
  end

  config.after(:suite) do
    # redirect stdout and stderr to console
    BawWorkers::Config.set_to_console
  end

  config.after(:each) do
    if Dir.exists?(BawWorkers::Settings.actions.harvest.to_do_path)
      FileUtils.rm_rf(BawWorkers::Settings.actions.harvest.to_do_path)
    end
  end

end
