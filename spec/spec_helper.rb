# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'simplecov'

if ENV['TRAVIS']
  require 'codeclimate-test-reporter'
  require 'coveralls'

  # code climate
  CodeClimate::TestReporter.configure do |config|
    config.logger.level = Logger::WARN
  end
  CodeClimate::TestReporter.start

  # coveralls
  Coveralls.wear!

  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
      Coveralls::SimpleCov::Formatter,
      CodeClimate::TestReporter::Formatter
  ]

else
  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
      SimpleCov::Formatter::HTMLFormatter
  ]
end

# start code coverage
SimpleCov.start

require 'zonebie'
require 'baw-workers'
require 'fakeredis'

# include shared_context
Dir[File.join(File.dirname(__FILE__), 'support', '**', '*.rb')].each {|file| require file }

# include rake tasks
require 'rake'
Dir[File.join(File.dirname(__FILE__), '..', 'lib', 'tasks', '*.rb')].each { |file| require file }

RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.profile_examples = 20

  Zonebie.set_random_timezone

  # redirect puts into a text file
  original_stderr = STDERR.clone
  original_stdout = STDOUT.clone

  # provide access to tmp dir and stdout and stderr files
  config.add_setting :tmp_dir
  config.tmp_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'tmp'))

  config.add_setting :default_settings_path
  config.default_settings_path = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'settings.default.yml'))

  config.add_setting :rspec_stdout_path
  config.rspec_stdout_path = File.join(config.tmp_dir, 'rspec_stdout.txt')

  config.add_setting :rspec_stderr_path
  config.rspec_stderr_path = File.join(config.tmp_dir, 'rspec_stderr.txt')

  config.add_setting :resque_stdout_path
  config.resque_stdout_path = File.join(config.tmp_dir, 'resque_worker.log')

  config.add_setting :resque_stderr_path
  config.resque_stderr_path = File.join(config.tmp_dir, 'resque_worker_error.log')

  config.before(:suite) do
    FileUtils.mkpath(config.tmp_dir)
  end

  config.before(:each) do
    # Redirect stderr and stdout
    STDERR.reopen(config.rspec_stderr_path, 'w+')
    STDERR.sync = true
    STDOUT.reopen(config.rspec_stdout_path, 'w+')
    STDOUT.sync = true
  end

  config.after(:each) do
    # Redirect stderr and stdout
    STDERR.reopen(original_stderr)
    STDOUT.reopen(original_stdout)

    FileUtils.rm config.rspec_stderr_path if File.exists? config.rspec_stderr_path
    FileUtils.rm config.rspec_stdout_path if File.exists? config.rspec_stdout_path

    FileUtils.rm config.resque_stderr_path if File.exists? config.resque_stderr_path
    FileUtils.rm config.resque_stdout_path if File.exists? config.resque_stdout_path
  end

  # setting the source file here means the rake task cannot change it
  Settings.set_source(config.default_settings_path)

end
